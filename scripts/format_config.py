#!/usr/bin/env python3
"""
Format configuration helpers for CppGraphIndex build system.

This module provides utilities for pre-commit formatting checks and
integration with various development workflows.
"""

import sys
import subprocess
from pathlib import Path
from typing import List, Optional, Tuple


def check_git_staged_files() -> List[Path]:
    """Get list of staged C++ files for pre-commit formatting check."""
    try:
        # Get staged files
        result = subprocess.run(
            ["git", "diff", "--cached", "--name-only"],
            capture_output=True, text=True, check=True
        )
        
        staged_files = []
        for line in result.stdout.strip().split('\n'):
            if line:
                file_path = Path(line)
                # Only include C++ source files
                if file_path.suffix in ['.cpp', '.h', '.hpp', '.cxx', '.cc']:
                    staged_files.append(file_path)
                    
        return staged_files
    except subprocess.CalledProcessError:
        return []


def run_format_check(files: List[Path], project_root: Path) -> Tuple[bool, str]:
    """
    Run clang-format check on specified files.
    
    Returns:
        Tuple of (success, output_message)
    """
    if not files:
        return True, "No C++ files to check"
        
    try:
        # Run clang-format with --dry-run and --Werror
        cmd = ["clang-format", "--dry-run", "--Werror"] + [str(f) for f in files]
        result = subprocess.run(
            cmd, 
            cwd=project_root,
            capture_output=True, 
            text=True
        )
        
        if result.returncode == 0:
            return True, f"All {len(files)} files are properly formatted"
        else:
            error_msg = f"Formatting issues found in {len(files)} files:\n"
            if result.stderr:
                error_msg += result.stderr
            error_msg += "\nRun 'python build.py format' to fix formatting issues"
            return False, error_msg
            
    except FileNotFoundError:
        return False, "clang-format not found. Please install clang-format."
    except Exception as e:
        return False, f"Error running format check: {e}"


def create_pre_commit_hook(project_root: Path) -> bool:
    """Create a git pre-commit hook for automatic formatting checks."""
    git_hooks_dir = project_root / ".git" / "hooks"
    
    if not git_hooks_dir.exists():
        print("Git hooks directory not found. Make sure this is a git repository.")
        return False
        
    pre_commit_hook = git_hooks_dir / "pre-commit"
    
    hook_content = f'''#!/bin/sh
# Pre-commit hook for CppGraphIndex formatting checks
# Generated by build system

echo "Running pre-commit formatting checks..."

# Change to project root
cd "{project_root}"

# Run format check using the build system
python build.py format --check-only --files $(git diff --cached --name-only --diff-filter=ACM | grep -E "\\.(cpp|h|hpp|cxx|cc)$" | tr '\\n' ' ')

# Check the exit code
if [ $? -ne 0 ]; then
    echo ""
    echo "❌ Pre-commit formatting check failed!"
    echo "Fix formatting issues before committing:"
    echo "  python build.py format"
    echo ""
    echo "Or skip this check with: git commit --no-verify"
    exit 1
fi

echo "✅ Pre-commit formatting check passed!"
'''
    
    try:
        with open(pre_commit_hook, 'w') as f:
            f.write(hook_content)
            
        # Make the hook executable
        pre_commit_hook.chmod(0o755)
        
        print(f"Pre-commit hook created: {pre_commit_hook}")
        print("Formatting checks will now run automatically before each commit.")
        return True
        
    except Exception as e:
        print(f"Failed to create pre-commit hook: {e}")
        return False


def main():
    """Main entry point for standalone usage."""
    if len(sys.argv) < 2:
        print("Usage: python format_config.py <command>")
        print("Commands:")
        print("  check-staged    - Check formatting of staged files")
        print("  install-hook    - Install pre-commit hook")
        sys.exit(1)
        
    command = sys.argv[1]
    project_root = Path(__file__).parent.parent
    
    if command == "check-staged":
        staged_files = check_git_staged_files()
        if not staged_files:
            print("No staged C++ files found")
            sys.exit(0)
            
        success, message = run_format_check(staged_files, project_root)
        print(message)
        sys.exit(0 if success else 1)
        
    elif command == "install-hook":
        success = create_pre_commit_hook(project_root)
        sys.exit(0 if success else 1)
        
    else:
        print(f"Unknown command: {command}")
        sys.exit(1)


if __name__ == "__main__":
    main()

